// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dit.proto

#ifndef PROTOBUF_dit_2eproto__INCLUDED
#define PROTOBUF_dit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace baidu {
namespace dit {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dit_2eproto();
void protobuf_AssignDesc_dit_2eproto();
void protobuf_ShutdownFile_dit_2eproto();

class ShareRequest;
class ShareResponse;
class UnShareRequest;
class UnShareResponse;
class ListRequest;
class SharePoint;
class ListResponse;

enum Status {
  kOk = 0,
  kError = 1
};
bool Status_IsValid(int value);
const Status Status_MIN = kOk;
const Status Status_MAX = kError;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class ShareRequest : public ::google::protobuf::Message {
 public:
  ShareRequest();
  virtual ~ShareRequest();

  ShareRequest(const ShareRequest& from);

  inline ShareRequest& operator=(const ShareRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareRequest& default_instance();

  void Swap(ShareRequest* other);

  // implements Message ----------------------------------------------

  ShareRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareRequest& from);
  void MergeFrom(const ShareRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:baidu.dit.proto.ShareRequest)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  friend void  protobuf_AddDesc_dit_2eproto();
  friend void protobuf_AssignDesc_dit_2eproto();
  friend void protobuf_ShutdownFile_dit_2eproto();

  void InitAsDefaultInstance();
  static ShareRequest* default_instance_;
};
// -------------------------------------------------------------------

class ShareResponse : public ::google::protobuf::Message {
 public:
  ShareResponse();
  virtual ~ShareResponse();

  ShareResponse(const ShareResponse& from);

  inline ShareResponse& operator=(const ShareResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareResponse& default_instance();

  void Swap(ShareResponse* other);

  // implements Message ----------------------------------------------

  ShareResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareResponse& from);
  void MergeFrom(const ShareResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .baidu.dit.proto.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::baidu::dit::proto::Status status() const;
  inline void set_status(::baidu::dit::proto::Status value);

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:baidu.dit.proto.ShareResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  int status_;
  friend void  protobuf_AddDesc_dit_2eproto();
  friend void protobuf_AssignDesc_dit_2eproto();
  friend void protobuf_ShutdownFile_dit_2eproto();

  void InitAsDefaultInstance();
  static ShareResponse* default_instance_;
};
// -------------------------------------------------------------------

class UnShareRequest : public ::google::protobuf::Message {
 public:
  UnShareRequest();
  virtual ~UnShareRequest();

  UnShareRequest(const UnShareRequest& from);

  inline UnShareRequest& operator=(const UnShareRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnShareRequest& default_instance();

  void Swap(UnShareRequest* other);

  // implements Message ----------------------------------------------

  UnShareRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnShareRequest& from);
  void MergeFrom(const UnShareRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:baidu.dit.proto.UnShareRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_dit_2eproto();
  friend void protobuf_AssignDesc_dit_2eproto();
  friend void protobuf_ShutdownFile_dit_2eproto();

  void InitAsDefaultInstance();
  static UnShareRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnShareResponse : public ::google::protobuf::Message {
 public:
  UnShareResponse();
  virtual ~UnShareResponse();

  UnShareResponse(const UnShareResponse& from);

  inline UnShareResponse& operator=(const UnShareResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnShareResponse& default_instance();

  void Swap(UnShareResponse* other);

  // implements Message ----------------------------------------------

  UnShareResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnShareResponse& from);
  void MergeFrom(const UnShareResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .baidu.dit.proto.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::baidu::dit::proto::Status status() const;
  inline void set_status(::baidu::dit::proto::Status value);

  // @@protoc_insertion_point(class_scope:baidu.dit.proto.UnShareResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int status_;
  friend void  protobuf_AddDesc_dit_2eproto();
  friend void protobuf_AssignDesc_dit_2eproto();
  friend void protobuf_ShutdownFile_dit_2eproto();

  void InitAsDefaultInstance();
  static UnShareResponse* default_instance_;
};
// -------------------------------------------------------------------

class ListRequest : public ::google::protobuf::Message {
 public:
  ListRequest();
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRequest& default_instance();

  void Swap(ListRequest* other);

  // implements Message ----------------------------------------------

  ListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:baidu.dit.proto.ListRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_dit_2eproto();
  friend void protobuf_AssignDesc_dit_2eproto();
  friend void protobuf_ShutdownFile_dit_2eproto();

  void InitAsDefaultInstance();
  static ListRequest* default_instance_;
};
// -------------------------------------------------------------------

class SharePoint : public ::google::protobuf::Message {
 public:
  SharePoint();
  virtual ~SharePoint();

  SharePoint(const SharePoint& from);

  inline SharePoint& operator=(const SharePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SharePoint& default_instance();

  void Swap(SharePoint* other);

  // implements Message ----------------------------------------------

  SharePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharePoint& from);
  void MergeFrom(const SharePoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:baidu.dit.proto.SharePoint)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_dit_2eproto();
  friend void protobuf_AssignDesc_dit_2eproto();
  friend void protobuf_ShutdownFile_dit_2eproto();

  void InitAsDefaultInstance();
  static SharePoint* default_instance_;
};
// -------------------------------------------------------------------

class ListResponse : public ::google::protobuf::Message {
 public:
  ListResponse();
  virtual ~ListResponse();

  ListResponse(const ListResponse& from);

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListResponse& default_instance();

  void Swap(ListResponse* other);

  // implements Message ----------------------------------------------

  ListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListResponse& from);
  void MergeFrom(const ListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .baidu.dit.proto.SharePoint shares = 1;
  inline int shares_size() const;
  inline void clear_shares();
  static const int kSharesFieldNumber = 1;
  inline const ::baidu::dit::proto::SharePoint& shares(int index) const;
  inline ::baidu::dit::proto::SharePoint* mutable_shares(int index);
  inline ::baidu::dit::proto::SharePoint* add_shares();
  inline const ::google::protobuf::RepeatedPtrField< ::baidu::dit::proto::SharePoint >&
      shares() const;
  inline ::google::protobuf::RepeatedPtrField< ::baidu::dit::proto::SharePoint >*
      mutable_shares();

  // @@protoc_insertion_point(class_scope:baidu.dit.proto.ListResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::baidu::dit::proto::SharePoint > shares_;
  friend void  protobuf_AddDesc_dit_2eproto();
  friend void protobuf_AssignDesc_dit_2eproto();
  friend void protobuf_ShutdownFile_dit_2eproto();

  void InitAsDefaultInstance();
  static ListResponse* default_instance_;
};
// ===================================================================

class DitServer_Stub;

class DitServer : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DitServer() {};
 public:
  virtual ~DitServer();

  typedef DitServer_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Share(::google::protobuf::RpcController* controller,
                       const ::baidu::dit::proto::ShareRequest* request,
                       ::baidu::dit::proto::ShareResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Unshare(::google::protobuf::RpcController* controller,
                       const ::baidu::dit::proto::UnShareRequest* request,
                       ::baidu::dit::proto::UnShareResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void List(::google::protobuf::RpcController* controller,
                       const ::baidu::dit::proto::ListRequest* request,
                       ::baidu::dit::proto::ListResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DitServer);
};

class DitServer_Stub : public DitServer {
 public:
  DitServer_Stub(::google::protobuf::RpcChannel* channel);
  DitServer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~DitServer_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements DitServer ------------------------------------------

  void Share(::google::protobuf::RpcController* controller,
                       const ::baidu::dit::proto::ShareRequest* request,
                       ::baidu::dit::proto::ShareResponse* response,
                       ::google::protobuf::Closure* done);
  void Unshare(::google::protobuf::RpcController* controller,
                       const ::baidu::dit::proto::UnShareRequest* request,
                       ::baidu::dit::proto::UnShareResponse* response,
                       ::google::protobuf::Closure* done);
  void List(::google::protobuf::RpcController* controller,
                       const ::baidu::dit::proto::ListRequest* request,
                       ::baidu::dit::proto::ListResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DitServer_Stub);
};


// ===================================================================


// ===================================================================

// ShareRequest

// optional string path = 1;
inline bool ShareRequest::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareRequest::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareRequest::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareRequest::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ShareRequest::path() const {
  // @@protoc_insertion_point(field_get:baidu.dit.proto.ShareRequest.path)
  return *path_;
}
inline void ShareRequest::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:baidu.dit.proto.ShareRequest.path)
}
inline void ShareRequest::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:baidu.dit.proto.ShareRequest.path)
}
inline void ShareRequest::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:baidu.dit.proto.ShareRequest.path)
}
inline ::std::string* ShareRequest::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:baidu.dit.proto.ShareRequest.path)
  return path_;
}
inline ::std::string* ShareRequest::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShareRequest::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:baidu.dit.proto.ShareRequest.path)
}

// -------------------------------------------------------------------

// ShareResponse

// optional .baidu.dit.proto.Status status = 1;
inline bool ShareResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::baidu::dit::proto::Status ShareResponse::status() const {
  // @@protoc_insertion_point(field_get:baidu.dit.proto.ShareResponse.status)
  return static_cast< ::baidu::dit::proto::Status >(status_);
}
inline void ShareResponse::set_status(::baidu::dit::proto::Status value) {
  assert(::baidu::dit::proto::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:baidu.dit.proto.ShareResponse.status)
}

// optional string key = 2;
inline bool ShareResponse::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShareResponse::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShareResponse::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShareResponse::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ShareResponse::key() const {
  // @@protoc_insertion_point(field_get:baidu.dit.proto.ShareResponse.key)
  return *key_;
}
inline void ShareResponse::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:baidu.dit.proto.ShareResponse.key)
}
inline void ShareResponse::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:baidu.dit.proto.ShareResponse.key)
}
inline void ShareResponse::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:baidu.dit.proto.ShareResponse.key)
}
inline ::std::string* ShareResponse::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:baidu.dit.proto.ShareResponse.key)
  return key_;
}
inline ::std::string* ShareResponse::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShareResponse::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:baidu.dit.proto.ShareResponse.key)
}

// -------------------------------------------------------------------

// UnShareRequest

// optional string key = 1;
inline bool UnShareRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnShareRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnShareRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnShareRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& UnShareRequest::key() const {
  // @@protoc_insertion_point(field_get:baidu.dit.proto.UnShareRequest.key)
  return *key_;
}
inline void UnShareRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:baidu.dit.proto.UnShareRequest.key)
}
inline void UnShareRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:baidu.dit.proto.UnShareRequest.key)
}
inline void UnShareRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:baidu.dit.proto.UnShareRequest.key)
}
inline ::std::string* UnShareRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:baidu.dit.proto.UnShareRequest.key)
  return key_;
}
inline ::std::string* UnShareRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnShareRequest::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:baidu.dit.proto.UnShareRequest.key)
}

// -------------------------------------------------------------------

// UnShareResponse

// optional .baidu.dit.proto.Status status = 1;
inline bool UnShareResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnShareResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnShareResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnShareResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::baidu::dit::proto::Status UnShareResponse::status() const {
  // @@protoc_insertion_point(field_get:baidu.dit.proto.UnShareResponse.status)
  return static_cast< ::baidu::dit::proto::Status >(status_);
}
inline void UnShareResponse::set_status(::baidu::dit::proto::Status value) {
  assert(::baidu::dit::proto::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:baidu.dit.proto.UnShareResponse.status)
}

// -------------------------------------------------------------------

// ListRequest

// optional string key = 1;
inline bool ListRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ListRequest::key() const {
  // @@protoc_insertion_point(field_get:baidu.dit.proto.ListRequest.key)
  return *key_;
}
inline void ListRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:baidu.dit.proto.ListRequest.key)
}
inline void ListRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:baidu.dit.proto.ListRequest.key)
}
inline void ListRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:baidu.dit.proto.ListRequest.key)
}
inline ::std::string* ListRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:baidu.dit.proto.ListRequest.key)
  return key_;
}
inline ::std::string* ListRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListRequest::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:baidu.dit.proto.ListRequest.key)
}

// -------------------------------------------------------------------

// SharePoint

// optional string path = 1;
inline bool SharePoint::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharePoint::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharePoint::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharePoint::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& SharePoint::path() const {
  // @@protoc_insertion_point(field_get:baidu.dit.proto.SharePoint.path)
  return *path_;
}
inline void SharePoint::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:baidu.dit.proto.SharePoint.path)
}
inline void SharePoint::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:baidu.dit.proto.SharePoint.path)
}
inline void SharePoint::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:baidu.dit.proto.SharePoint.path)
}
inline ::std::string* SharePoint::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:baidu.dit.proto.SharePoint.path)
  return path_;
}
inline ::std::string* SharePoint::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SharePoint::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:baidu.dit.proto.SharePoint.path)
}

// optional string key = 2;
inline bool SharePoint::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharePoint::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharePoint::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharePoint::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SharePoint::key() const {
  // @@protoc_insertion_point(field_get:baidu.dit.proto.SharePoint.key)
  return *key_;
}
inline void SharePoint::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:baidu.dit.proto.SharePoint.key)
}
inline void SharePoint::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:baidu.dit.proto.SharePoint.key)
}
inline void SharePoint::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:baidu.dit.proto.SharePoint.key)
}
inline ::std::string* SharePoint::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:baidu.dit.proto.SharePoint.key)
  return key_;
}
inline ::std::string* SharePoint::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SharePoint::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:baidu.dit.proto.SharePoint.key)
}

// -------------------------------------------------------------------

// ListResponse

// repeated .baidu.dit.proto.SharePoint shares = 1;
inline int ListResponse::shares_size() const {
  return shares_.size();
}
inline void ListResponse::clear_shares() {
  shares_.Clear();
}
inline const ::baidu::dit::proto::SharePoint& ListResponse::shares(int index) const {
  // @@protoc_insertion_point(field_get:baidu.dit.proto.ListResponse.shares)
  return shares_.Get(index);
}
inline ::baidu::dit::proto::SharePoint* ListResponse::mutable_shares(int index) {
  // @@protoc_insertion_point(field_mutable:baidu.dit.proto.ListResponse.shares)
  return shares_.Mutable(index);
}
inline ::baidu::dit::proto::SharePoint* ListResponse::add_shares() {
  // @@protoc_insertion_point(field_add:baidu.dit.proto.ListResponse.shares)
  return shares_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::baidu::dit::proto::SharePoint >&
ListResponse::shares() const {
  // @@protoc_insertion_point(field_list:baidu.dit.proto.ListResponse.shares)
  return shares_;
}
inline ::google::protobuf::RepeatedPtrField< ::baidu::dit::proto::SharePoint >*
ListResponse::mutable_shares() {
  // @@protoc_insertion_point(field_mutable_list:baidu.dit.proto.ListResponse.shares)
  return &shares_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dit
}  // namespace baidu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::baidu::dit::proto::Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::baidu::dit::proto::Status>() {
  return ::baidu::dit::proto::Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dit_2eproto__INCLUDED
