// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace baidu {
namespace dit {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ShareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnShareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnShareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnShareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnShareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* DitServer_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dit_2eproto() {
  protobuf_AddDesc_dit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dit.proto");
  GOOGLE_CHECK(file != NULL);
  ShareRequest_descriptor_ = file->message_type(0);
  static const int ShareRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareRequest, path_),
  };
  ShareRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareRequest_descriptor_,
      ShareRequest::default_instance_,
      ShareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareRequest));
  ShareResponse_descriptor_ = file->message_type(1);
  static const int ShareResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareResponse, key_),
  };
  ShareResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareResponse_descriptor_,
      ShareResponse::default_instance_,
      ShareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareResponse));
  UnShareRequest_descriptor_ = file->message_type(2);
  static const int UnShareRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnShareRequest, key_),
  };
  UnShareRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnShareRequest_descriptor_,
      UnShareRequest::default_instance_,
      UnShareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnShareRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnShareRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnShareRequest));
  UnShareResponse_descriptor_ = file->message_type(3);
  static const int UnShareResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnShareResponse, status_),
  };
  UnShareResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnShareResponse_descriptor_,
      UnShareResponse::default_instance_,
      UnShareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnShareResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnShareResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnShareResponse));
  ListRequest_descriptor_ = file->message_type(4);
  static const int ListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, key_),
  };
  ListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListRequest_descriptor_,
      ListRequest::default_instance_,
      ListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListRequest));
  SharePoint_descriptor_ = file->message_type(5);
  static const int SharePoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharePoint, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharePoint, key_),
  };
  SharePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharePoint_descriptor_,
      SharePoint::default_instance_,
      SharePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharePoint));
  ListResponse_descriptor_ = file->message_type(6);
  static const int ListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, shares_),
  };
  ListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListResponse_descriptor_,
      ListResponse::default_instance_,
      ListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListResponse));
  Status_descriptor_ = file->enum_type(0);
  DitServer_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareRequest_descriptor_, &ShareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareResponse_descriptor_, &ShareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnShareRequest_descriptor_, &UnShareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnShareResponse_descriptor_, &UnShareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListRequest_descriptor_, &ListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharePoint_descriptor_, &SharePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListResponse_descriptor_, &ListResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dit_2eproto() {
  delete ShareRequest::default_instance_;
  delete ShareRequest_reflection_;
  delete ShareResponse::default_instance_;
  delete ShareResponse_reflection_;
  delete UnShareRequest::default_instance_;
  delete UnShareRequest_reflection_;
  delete UnShareResponse::default_instance_;
  delete UnShareResponse_reflection_;
  delete ListRequest::default_instance_;
  delete ListRequest_reflection_;
  delete SharePoint::default_instance_;
  delete SharePoint_reflection_;
  delete ListResponse::default_instance_;
  delete ListResponse_reflection_;
}

void protobuf_AddDesc_dit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tdit.proto\022\017baidu.dit.proto\"\034\n\014ShareReq"
    "uest\022\014\n\004path\030\001 \001(\t\"E\n\rShareResponse\022\'\n\006s"
    "tatus\030\001 \001(\0162\027.baidu.dit.proto.Status\022\013\n\003"
    "key\030\002 \001(\t\"\035\n\016UnShareRequest\022\013\n\003key\030\001 \001(\t"
    "\":\n\017UnShareResponse\022\'\n\006status\030\001 \001(\0162\027.ba"
    "idu.dit.proto.Status\"\032\n\013ListRequest\022\013\n\003k"
    "ey\030\001 \001(\t\"\'\n\nSharePoint\022\014\n\004path\030\001 \001(\t\022\013\n\003"
    "key\030\002 \001(\t\";\n\014ListResponse\022+\n\006shares\030\001 \003("
    "\0132\033.baidu.dit.proto.SharePoint*\035\n\006Status"
    "\022\007\n\003kOk\020\000\022\n\n\006kError\020\0012\346\001\n\tDitServer\022F\n\005S"
    "hare\022\035.baidu.dit.proto.ShareRequest\032\036.ba"
    "idu.dit.proto.ShareResponse\022L\n\007Unshare\022\037"
    ".baidu.dit.proto.UnShareRequest\032 .baidu."
    "dit.proto.UnShareResponse\022C\n\004List\022\034.baid"
    "u.dit.proto.ListRequest\032\035.baidu.dit.prot"
    "o.ListResponseB\003\200\001\001", 619);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dit.proto", &protobuf_RegisterTypes);
  ShareRequest::default_instance_ = new ShareRequest();
  ShareResponse::default_instance_ = new ShareResponse();
  UnShareRequest::default_instance_ = new UnShareRequest();
  UnShareResponse::default_instance_ = new UnShareResponse();
  ListRequest::default_instance_ = new ListRequest();
  SharePoint::default_instance_ = new SharePoint();
  ListResponse::default_instance_ = new ListResponse();
  ShareRequest::default_instance_->InitAsDefaultInstance();
  ShareResponse::default_instance_->InitAsDefaultInstance();
  UnShareRequest::default_instance_->InitAsDefaultInstance();
  UnShareResponse::default_instance_->InitAsDefaultInstance();
  ListRequest::default_instance_->InitAsDefaultInstance();
  SharePoint::default_instance_->InitAsDefaultInstance();
  ListResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dit_2eproto {
  StaticDescriptorInitializer_dit_2eproto() {
    protobuf_AddDesc_dit_2eproto();
  }
} static_descriptor_initializer_dit_2eproto_;
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ShareRequest::kPathFieldNumber;
#endif  // !_MSC_VER

ShareRequest::ShareRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.dit.proto.ShareRequest)
}

void ShareRequest::InitAsDefaultInstance() {
}

ShareRequest::ShareRequest(const ShareRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.dit.proto.ShareRequest)
}

void ShareRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareRequest::~ShareRequest() {
  // @@protoc_insertion_point(destructor:baidu.dit.proto.ShareRequest)
  SharedDtor();
}

void ShareRequest::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ShareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareRequest_descriptor_;
}

const ShareRequest& ShareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dit_2eproto();
  return *default_instance_;
}

ShareRequest* ShareRequest::default_instance_ = NULL;

ShareRequest* ShareRequest::New() const {
  return new ShareRequest;
}

void ShareRequest::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.dit.proto.ShareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.dit.proto.ShareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.dit.proto.ShareRequest)
  return false;
#undef DO_
}

void ShareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.dit.proto.ShareRequest)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.dit.proto.ShareRequest)
}

::google::protobuf::uint8* ShareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.dit.proto.ShareRequest)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.dit.proto.ShareRequest)
  return target;
}

int ShareRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareRequest::MergeFrom(const ShareRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareRequest::CopyFrom(const ShareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareRequest::IsInitialized() const {

  return true;
}

void ShareRequest::Swap(ShareRequest* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareRequest_descriptor_;
  metadata.reflection = ShareRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareResponse::kStatusFieldNumber;
const int ShareResponse::kKeyFieldNumber;
#endif  // !_MSC_VER

ShareResponse::ShareResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.dit.proto.ShareResponse)
}

void ShareResponse::InitAsDefaultInstance() {
}

ShareResponse::ShareResponse(const ShareResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.dit.proto.ShareResponse)
}

void ShareResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareResponse::~ShareResponse() {
  // @@protoc_insertion_point(destructor:baidu.dit.proto.ShareResponse)
  SharedDtor();
}

void ShareResponse::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ShareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareResponse_descriptor_;
}

const ShareResponse& ShareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dit_2eproto();
  return *default_instance_;
}

ShareResponse* ShareResponse::default_instance_ = NULL;

ShareResponse* ShareResponse::New() const {
  return new ShareResponse;
}

void ShareResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    status_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.dit.proto.ShareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .baidu.dit.proto.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::baidu::dit::proto::Status_IsValid(value)) {
            set_status(static_cast< ::baidu::dit::proto::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.dit.proto.ShareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.dit.proto.ShareResponse)
  return false;
#undef DO_
}

void ShareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.dit.proto.ShareResponse)
  // optional .baidu.dit.proto.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.dit.proto.ShareResponse)
}

::google::protobuf::uint8* ShareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.dit.proto.ShareResponse)
  // optional .baidu.dit.proto.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.dit.proto.ShareResponse)
  return target;
}

int ShareResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .baidu.dit.proto.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareResponse::MergeFrom(const ShareResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareResponse::CopyFrom(const ShareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareResponse::IsInitialized() const {

  return true;
}

void ShareResponse::Swap(ShareResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareResponse_descriptor_;
  metadata.reflection = ShareResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnShareRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

UnShareRequest::UnShareRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.dit.proto.UnShareRequest)
}

void UnShareRequest::InitAsDefaultInstance() {
}

UnShareRequest::UnShareRequest(const UnShareRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.dit.proto.UnShareRequest)
}

void UnShareRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnShareRequest::~UnShareRequest() {
  // @@protoc_insertion_point(destructor:baidu.dit.proto.UnShareRequest)
  SharedDtor();
}

void UnShareRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void UnShareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnShareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnShareRequest_descriptor_;
}

const UnShareRequest& UnShareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dit_2eproto();
  return *default_instance_;
}

UnShareRequest* UnShareRequest::default_instance_ = NULL;

UnShareRequest* UnShareRequest::New() const {
  return new UnShareRequest;
}

void UnShareRequest::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnShareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.dit.proto.UnShareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.dit.proto.UnShareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.dit.proto.UnShareRequest)
  return false;
#undef DO_
}

void UnShareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.dit.proto.UnShareRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.dit.proto.UnShareRequest)
}

::google::protobuf::uint8* UnShareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.dit.proto.UnShareRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.dit.proto.UnShareRequest)
  return target;
}

int UnShareRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnShareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnShareRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnShareRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnShareRequest::MergeFrom(const UnShareRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnShareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnShareRequest::CopyFrom(const UnShareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnShareRequest::IsInitialized() const {

  return true;
}

void UnShareRequest::Swap(UnShareRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnShareRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnShareRequest_descriptor_;
  metadata.reflection = UnShareRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnShareResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

UnShareResponse::UnShareResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.dit.proto.UnShareResponse)
}

void UnShareResponse::InitAsDefaultInstance() {
}

UnShareResponse::UnShareResponse(const UnShareResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.dit.proto.UnShareResponse)
}

void UnShareResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnShareResponse::~UnShareResponse() {
  // @@protoc_insertion_point(destructor:baidu.dit.proto.UnShareResponse)
  SharedDtor();
}

void UnShareResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnShareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnShareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnShareResponse_descriptor_;
}

const UnShareResponse& UnShareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dit_2eproto();
  return *default_instance_;
}

UnShareResponse* UnShareResponse::default_instance_ = NULL;

UnShareResponse* UnShareResponse::New() const {
  return new UnShareResponse;
}

void UnShareResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnShareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.dit.proto.UnShareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .baidu.dit.proto.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::baidu::dit::proto::Status_IsValid(value)) {
            set_status(static_cast< ::baidu::dit::proto::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.dit.proto.UnShareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.dit.proto.UnShareResponse)
  return false;
#undef DO_
}

void UnShareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.dit.proto.UnShareResponse)
  // optional .baidu.dit.proto.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.dit.proto.UnShareResponse)
}

::google::protobuf::uint8* UnShareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.dit.proto.UnShareResponse)
  // optional .baidu.dit.proto.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.dit.proto.UnShareResponse)
  return target;
}

int UnShareResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .baidu.dit.proto.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnShareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnShareResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnShareResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnShareResponse::MergeFrom(const UnShareResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnShareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnShareResponse::CopyFrom(const UnShareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnShareResponse::IsInitialized() const {

  return true;
}

void UnShareResponse::Swap(UnShareResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnShareResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnShareResponse_descriptor_;
  metadata.reflection = UnShareResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

ListRequest::ListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.dit.proto.ListRequest)
}

void ListRequest::InitAsDefaultInstance() {
}

ListRequest::ListRequest(const ListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.dit.proto.ListRequest)
}

void ListRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRequest::~ListRequest() {
  // @@protoc_insertion_point(destructor:baidu.dit.proto.ListRequest)
  SharedDtor();
}

void ListRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRequest_descriptor_;
}

const ListRequest& ListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dit_2eproto();
  return *default_instance_;
}

ListRequest* ListRequest::default_instance_ = NULL;

ListRequest* ListRequest::New() const {
  return new ListRequest;
}

void ListRequest::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.dit.proto.ListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.dit.proto.ListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.dit.proto.ListRequest)
  return false;
#undef DO_
}

void ListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.dit.proto.ListRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.dit.proto.ListRequest)
}

::google::protobuf::uint8* ListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.dit.proto.ListRequest)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.dit.proto.ListRequest)
  return target;
}

int ListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRequest::MergeFrom(const ListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRequest::CopyFrom(const ListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRequest::IsInitialized() const {

  return true;
}

void ListRequest::Swap(ListRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRequest_descriptor_;
  metadata.reflection = ListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharePoint::kPathFieldNumber;
const int SharePoint::kKeyFieldNumber;
#endif  // !_MSC_VER

SharePoint::SharePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.dit.proto.SharePoint)
}

void SharePoint::InitAsDefaultInstance() {
}

SharePoint::SharePoint(const SharePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.dit.proto.SharePoint)
}

void SharePoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharePoint::~SharePoint() {
  // @@protoc_insertion_point(destructor:baidu.dit.proto.SharePoint)
  SharedDtor();
}

void SharePoint::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SharePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharePoint_descriptor_;
}

const SharePoint& SharePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dit_2eproto();
  return *default_instance_;
}

SharePoint* SharePoint::default_instance_ = NULL;

SharePoint* SharePoint::New() const {
  return new SharePoint;
}

void SharePoint::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.dit.proto.SharePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.dit.proto.SharePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.dit.proto.SharePoint)
  return false;
#undef DO_
}

void SharePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.dit.proto.SharePoint)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.dit.proto.SharePoint)
}

::google::protobuf::uint8* SharePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.dit.proto.SharePoint)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.dit.proto.SharePoint)
  return target;
}

int SharePoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharePoint::MergeFrom(const SharePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharePoint::CopyFrom(const SharePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharePoint::IsInitialized() const {

  return true;
}

void SharePoint::Swap(SharePoint* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharePoint_descriptor_;
  metadata.reflection = SharePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListResponse::kSharesFieldNumber;
#endif  // !_MSC_VER

ListResponse::ListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:baidu.dit.proto.ListResponse)
}

void ListResponse::InitAsDefaultInstance() {
}

ListResponse::ListResponse(const ListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:baidu.dit.proto.ListResponse)
}

void ListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListResponse::~ListResponse() {
  // @@protoc_insertion_point(destructor:baidu.dit.proto.ListResponse)
  SharedDtor();
}

void ListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListResponse_descriptor_;
}

const ListResponse& ListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dit_2eproto();
  return *default_instance_;
}

ListResponse* ListResponse::default_instance_ = NULL;

ListResponse* ListResponse::New() const {
  return new ListResponse;
}

void ListResponse::Clear() {
  shares_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:baidu.dit.proto.ListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .baidu.dit.proto.SharePoint shares = 1;
      case 1: {
        if (tag == 10) {
         parse_shares:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shares()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shares;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:baidu.dit.proto.ListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:baidu.dit.proto.ListResponse)
  return false;
#undef DO_
}

void ListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:baidu.dit.proto.ListResponse)
  // repeated .baidu.dit.proto.SharePoint shares = 1;
  for (int i = 0; i < this->shares_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shares(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:baidu.dit.proto.ListResponse)
}

::google::protobuf::uint8* ListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:baidu.dit.proto.ListResponse)
  // repeated .baidu.dit.proto.SharePoint shares = 1;
  for (int i = 0; i < this->shares_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shares(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:baidu.dit.proto.ListResponse)
  return target;
}

int ListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .baidu.dit.proto.SharePoint shares = 1;
  total_size += 1 * this->shares_size();
  for (int i = 0; i < this->shares_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shares(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListResponse::MergeFrom(const ListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  shares_.MergeFrom(from.shares_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListResponse::CopyFrom(const ListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResponse::IsInitialized() const {

  return true;
}

void ListResponse::Swap(ListResponse* other) {
  if (other != this) {
    shares_.Swap(&other->shares_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListResponse_descriptor_;
  metadata.reflection = ListResponse_reflection_;
  return metadata;
}


// ===================================================================

DitServer::~DitServer() {}

const ::google::protobuf::ServiceDescriptor* DitServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DitServer_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* DitServer::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return DitServer_descriptor_;
}

void DitServer::Share(::google::protobuf::RpcController* controller,
                         const ::baidu::dit::proto::ShareRequest*,
                         ::baidu::dit::proto::ShareResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Share() not implemented.");
  done->Run();
}

void DitServer::Unshare(::google::protobuf::RpcController* controller,
                         const ::baidu::dit::proto::UnShareRequest*,
                         ::baidu::dit::proto::UnShareResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Unshare() not implemented.");
  done->Run();
}

void DitServer::List(::google::protobuf::RpcController* controller,
                         const ::baidu::dit::proto::ListRequest*,
                         ::baidu::dit::proto::ListResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method List() not implemented.");
  done->Run();
}

void DitServer::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), DitServer_descriptor_);
  switch(method->index()) {
    case 0:
      Share(controller,
             ::google::protobuf::down_cast<const ::baidu::dit::proto::ShareRequest*>(request),
             ::google::protobuf::down_cast< ::baidu::dit::proto::ShareResponse*>(response),
             done);
      break;
    case 1:
      Unshare(controller,
             ::google::protobuf::down_cast<const ::baidu::dit::proto::UnShareRequest*>(request),
             ::google::protobuf::down_cast< ::baidu::dit::proto::UnShareResponse*>(response),
             done);
      break;
    case 2:
      List(controller,
             ::google::protobuf::down_cast<const ::baidu::dit::proto::ListRequest*>(request),
             ::google::protobuf::down_cast< ::baidu::dit::proto::ListResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DitServer::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::baidu::dit::proto::ShareRequest::default_instance();
    case 1:
      return ::baidu::dit::proto::UnShareRequest::default_instance();
    case 2:
      return ::baidu::dit::proto::ListRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& DitServer::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::baidu::dit::proto::ShareResponse::default_instance();
    case 1:
      return ::baidu::dit::proto::UnShareResponse::default_instance();
    case 2:
      return ::baidu::dit::proto::ListResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

DitServer_Stub::DitServer_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DitServer_Stub::DitServer_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DitServer_Stub::~DitServer_Stub() {
  if (owns_channel_) delete channel_;
}

void DitServer_Stub::Share(::google::protobuf::RpcController* controller,
                              const ::baidu::dit::proto::ShareRequest* request,
                              ::baidu::dit::proto::ShareResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DitServer_Stub::Unshare(::google::protobuf::RpcController* controller,
                              const ::baidu::dit::proto::UnShareRequest* request,
                              ::baidu::dit::proto::UnShareResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DitServer_Stub::List(::google::protobuf::RpcController* controller,
                              const ::baidu::dit::proto::ListRequest* request,
                              ::baidu::dit::proto::ListResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dit
}  // namespace baidu

// @@protoc_insertion_point(global_scope)
